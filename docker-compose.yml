services:
  caddy:
    image: caddy:latest
    container_name: caddy_proxy
    restart: unless-stopped
    ports:
      - "80:80"    # For the first-time SSL certificate
      - "443:443"  # For all your HTTPS traffic
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile  # Your Caddy config
      - caddy_data:/data                  # To store SSL certs
    networks:
      - neXt
    depends_on:
      - apigateway

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'vp3awo5eSS2vxlVu66xhfQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - neXt
    healthcheck:
      # Fixed: This now checks the internal Docker port
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    # No ports - keep this internal. We can expose it with Caddy later if you want.
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka
    networks:
      - neXt

  # --- FRONTEND SERVICE REMOVED (It's on Vercel) ---

  apigateway:
    image: ddrmin/api-gateway:latest
    container_name: apigateway
    restart: unless-stopped
    # No ports - Caddy will handle this.
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    env_file:
      - ./.env # All env variables are now loaded from the .env file
    networks:
      - neXt
    depends_on:
      - event
      - ticket

  notifi:
    # --- IMPORTANT ---
    # You must build and push this image to Docker Hub
    image: ddrmin/notification-service:latest
    container_name: notification_service
    restart: unless-stopped
    # No ports - internal only
    depends_on:
      - redis2
    env_file:
      - ./.env
    networks:
      - neXt

  redis2:
    image: "redis:alpine"
    container_name: redisDB2
    restart: unless-stopped
    # No ports - internal only
    volumes:
      - redis-data2:/data
    networks:
      - neXt

  event:
    image: ddrmin/event-and-venue-service:latest
    container_name: event_service
    restart: unless-stopped
    # No ports - internal only
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - PORT=4000
      - NODE_ENV=development
      - DATABASE_URL=${EVENT_SERVICE_DATABASE_URL}
      - DIRECT_URL=${EVENT_SERVICE_DIRECT_URL}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - CLOUDINARY_CLOUD_NAME=${EVENT_SERVICE_CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${EVENT_SERVICE_CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${EVENT_SERVICE_CLOUDINARY_API_SECRET}
    networks:
      - neXt

  ticket:
    image: ddrmin/ticket-and-order-service:latest
    container_name: ticket_service
    restart: unless-stopped
    depends_on:
      - redis
    # No ports - internal only
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - DATABASE_URL=${TICKET_SERVICE_DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - REDIS_URL=${REDIS_URL}
      - APIGATEWAY_DOCKER_URL=${APIGATEWAY_URL}
    networks:
      - neXt

  redis:
    image: "redis:alpine"
    container_name: redisDB
    restart: unless-stopped
    # No ports - internal only
    volumes:
      - redis-data:/data
    networks:
      - neXt

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    # No ports - internal only
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - neXt

volumes:
  redis-data:
  kafka-data:
  redis-data2:
  caddy_data: 

networks:
  neXt:
    driver: bridge
