services:
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'vp3awo5eSS2vxlVu66xhfQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - neXt
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafka-ui
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      - kafka
    networks:
      - neXt


  frontend:
    build: ./nextjs-frontend  
    container_name: nextjs_frontend
    ports:
      - "3000:3000" 
    restart: always

  apigateway:
    image: ddrmin/api-gateway:latest
    container_name: apigateway
    restart: always
    ports:
      - "5000:5000" 
    volumes:
      # This maps your local Firebase key to a path inside the container 
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      # Server Configuration
      - PORT=${APIGATEWAY_PORT}
      - NODE_ENV=${NODE_ENV}

      # Firebase Configuration (path is now inside the container)
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}

      # Backend Services URLs (using Docker service names) 
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_URL}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_URL}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PUBLIC_SERVICE_URL=${PUBLIC_SERVICE_URL}

      # Security Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}

      # Proxy Configuration
      - PROXY_TIMEOUT=${PROXY_TIMEOUT}

      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL}

    networks:
      - neXt


  notifi:
    build: ../Notification_Service
    container_name: notification_service
    ports:
      - "5001:5001"
    depends_on:
      - redis2
    environment:
      - PORT=${NOTIFICATION_SERVICE_PORT}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - EVMS_API_URL=${EVMS_API_URL}
      - USER_SERVICE_API_URL=${USER_SERVICE_API_URL}
      - ORDER_SERVICE_API_URL=${TICKET_SERVICE_URL}
      - REDIS_URL=${REDIS_URL2}
      - DATABASE_URL=${NOTIFICATION_SERVICE_DATABASE_URL}
      - DIRECT_URL=${NOTIFICATION_SERVICE_DIRECT_URL}
    networks:
      - neXt
    


  redis2:
    image: "redis:alpine"
    container_name: redisDB2
    ports:
      - "6380:6380"
    volumes:
      - redis-data2:/data
    restart: unless-stopped
    networks:
      - neXt

  event:
    image: ddrmin/event-and-venue-service:latest
    container_name: event_service
    ports:
      - "4000:4000"
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - PORT=4000
      - NODE_ENV=development
      - DATABASE_URL=${EVENT_SERVICE_DATABASE_URL}
      - DIRECT_URL=${EVENT_SERVICE_DIRECT_URL}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - CLOUDINARY_CLOUD_NAME=${EVENT_SERVICE_CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${EVENT_SERVICE_CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${EVENT_SERVICE_CLOUDINARY_API_SECRET}
    networks:
      - neXt

  ticket:
    image: ddrmin/ticket-and-order-service:latest
    container_name: ticket_service
    depends_on:
      - redis
      - dozzle
    ports:
      - "8000:8000"
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - DATABASE_URL=${TICKET_SERVICE_DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - REDIS_URL=${REDIS_URL}
      - APIGATEWAY_DOCKER_URL=${APIGATEWAY_URL}
    networks:
      - neXt

  redis:
    image: "redis:alpine"
    container_name: redisDB
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - neXt

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - "${DOCKER_SOCKET_PATH:-/var/run/docker.sock}:/var/run/docker.sock:ro"
    ports:
      - "9999:8080"
    networks:
      - neXt

volumes:
  redis-data:
  kafka-data:
  redis-data2:


networks:
  neXt:
    driver: bridge