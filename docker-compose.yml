services:
  caddy:
    image: caddy:latest
    container_name: caddy_proxy
    restart: unless-stopped
    ports:
      - "80:80"    # For the first-time SSL certificate
      - "443:443"  # For all your HTTPS traffic
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile  # Your Caddy config
      - caddy_data:/data                  # To store SSL certs
    networks:
      - neXt
    depends_on:
      - apigateway

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - neXt

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'vp3awo5eSS2vxlVu66xhfQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - neXt
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafka-ui
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      - kafka
    networks:
      - neXt
    deploy:
      resources:
        limits:
          memory: 500M

  apigateway:
    image: ddrmin/api-gateway:latest
    container_name: apigateway
    restart: unless-stopped
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      # Server Configuration
      - PORT=${APIGATEWAY_PORT}
      - NODE_ENV=${NODE_ENV}

      # Firebase Configuration (path is now inside the container)
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}

      # Backend Services URLs (using Docker service names) 
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_URL}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_URL}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PUBLIC_SERVICE_URL=${PUBLIC_SERVICE_URL}

      # Security Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}

      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}

      # Proxy Configuration
      - PROXY_TIMEOUT=${PROXY_TIMEOUT}

      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL}
      
    networks:
      - neXt

  notification:
    image: ddrmin/notification-service:latest
    container_name: notification_service
    restart: unless-stopped
    volumes:
      - ./gcs-service-account.json:/app/gcs-service-account.json
      - ./firebase-service-account.json:/app/firebase-service-account.json
    depends_on:
      - redis2
      - kafka
    environment:
      - PORT=${NOTIFICATION_SERVICE_PORT}

      # SendGrid Configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - SENDGRID_TEMPLATE_ID=${SENDGRID_TEMPLATE_ID}

      # External Service URLs
      - EVENT_SERVICE_URL=${EVENT_SERVICE_URL}

      # Redis Configuration
      - REDIS_URL=${REDIS_URL2}

      # Database Configuration
      - DATABASE_URL=${NOTIFICATION_SERVICE_DATABASE_URL}
      - DIRECT_URL=${NOTIFICATION_SERVICE_DIRECT_URL}

      # Kafka Configuration
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_GROUP_ID=notification-service-group
      - KAFKAJS_NO_PARTITIONER_WARNING=1

      # Google Cloud Storage Configuration
      - GCS_PROJECT_ID=${GCS_PROJECT_ID}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GCS_KEY_FILE=${GCS_KEY_FILE}

      # Firebase Admin SDK Configuration
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_PATH}
    networks:
      - neXt

  event:
    image: ddrmin/event-and-venue-service:latest
    container_name: event_service
    restart: unless-stopped
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - PORT=${EVENT_SERVICE_PORT}
      - NODE_ENV=development
      - DATABASE_URL=${EVENT_SERVICE_DATABASE_URL}
      - DIRECT_URL=${EVENT_SERVICE_DIRECT_URL}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - CLOUDINARY_CLOUD_NAME=${EVENT_SERVICE_CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${EVENT_SERVICE_CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${EVENT_SERVICE_CLOUDINARY_API_SECRET}
    networks:
      - neXt

  ticket:
    image: ddrmin/ticket-and-order-service:latest
    container_name: ticket_service
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./firebase-service-account.json:/app/firebase-service-account.json
    environment:
      - DATABASE_URL=${TICKET_SERVICE_DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FIREBASE_SERVICE_ACCOUNT_PATH=${FIREBASE_SERVICE_ACCOUNT_PATH}
      - REDIS_URL=${REDIS_URL}
      - APIGATEWAY_DOCKER_URL=${APIGATEWAY_URL}

      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092 
      - KAFKA_CLIENT_ID=ticket-order-service
      - KAFKA_NOTIFICATIONS_TOPIC=ticket_notifications
      - KAFKA_LOG_LEVEL=INFO
      - KAFKA_ACKS=all
      - KAFKA_RETRIES=3
      - KAFKA_RETRY_BACKOFF_MS=200
      - KAFKA_LINGER_MS=10
      - KAFKA_BATCH_SIZE=16384
      - KAFKA_COMPRESSION_TYPE=snappy
      - KAFKA_MAX_IN_FLIGHT_REQUESTS=5
      - KAFKA_ENABLE_IDEMPOTENCE=true
      - KAFKA_SOCKET_KEEPALIVE_ENABLE=true
    networks:
      - neXt


  redis:
    image: "redis:alpine"
    container_name: redisDB
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - neXt

  redis2:
    image: "redis:alpine"
    container_name: redisDB2
    restart: unless-stopped
    volumes:
      - redis-data2:/data
    networks:
      - neXt
      
volumes:
  redis-data:
  kafka-data:
  redis-data2:
  caddy_data: 

networks:
  neXt:
    driver: bridge
